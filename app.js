const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
} = require('@bot-whatsapp/bot')
require('dotenv').config()

const { formatDate } = require('./utils/formatDate')
const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const JsonFileAdapter = require('@bot-whatsapp/database/json')
// autho
const { GoogleSpreadsheet } = require('google-spreadsheet')
const RESPONSES_SHEET_ID = '1G8e6pQ1AgGz5cddCwkGN-FatOb4ybdVPGKrGxNBfilY' //AquÃ­ pondras el ID de tu hoja de Sheets
const { JWT } = require('google-auth-library')
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.CLIENT_EMAIL,
  key: process.env.PRIVATE_KEY,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
})
const doc = new GoogleSpreadsheet(RESPONSES_SHEET_ID, serviceAccountAuth)

const flowEndChat = addKeyword('end').addAnswer(
  'Registro *cancelado* por falta de actividad del cliente.\n Puedes iniciar el registro nuevamente o consultar pentieste enviando *Lista*',
)

const flowRegisterTask = addKeyword(['registrar', 'registra', 'registro'])
  .addAnswer('Ok! vamos a registrar una tarea', { delay: 2000 })
  .addAnswer(
    'Dime tu tarea pendiente',
    { capture: true, idle: 35000, delay: 2000 },
    async (ctx, { flowDynamic, gotoFlow }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowEndChat)
      }
      task = { task: ctx.body, from: ctx.from }
      const res = await ingresarDatos(task)
      if (res) {
        await flowDynamic([
          {
            body: `Registrada`,
          },
        ])
      } else {
        await flowDynamic([
          {
            body: `*Hubo un error*`,
          },
        ])
      }
      flowDynamic()
    },
  )

const flowEditTask = addKeyword(['terminar', 'completar']).addAnswer(
  'Ok! indica el *ID* de la tarea',

  { capture: true, idle: 35000, delay: 2000 },
  async (ctx, { flowDynamic, gotoFlow }) => {
    if (ctx?.idleFallBack) {
      return gotoFlow(flowEndChat)
    }
    let task = { id: ctx.body, from: ctx.from }
    const { status, message } = await updatedTask(task)
    if (status) {
      await flowDynamic([
        {
          body: message,
        },
      ])
    } else {
      await flowDynamic([
        {
          body: `*Hubo un error*`,
        },
      ])
    }
    flowDynamic()
  },
)
const flowListTask = addKeyword([
  'listar',
  'lista',
  'pendiente',
  'tareas',
]).addAnswer(
  'Ok! vamos a listar tus pendientes',
  { delay: 2000 },
  async (ctx, { flowDynamic }) => {
    const tasksList = await getTask(ctx)
    if (tasksList.length === 0) {
      return flowDynamic([
        { body: `*${ctx.pushName}* no tienes tareas pendientes` },
      ])
    }
    flowDynamic([
      { body: `*${ctx.pushName}* tus pendientes son:`, delay: 2000 },
    ])
    const taks = tasksList.map((dato) => ({
      body: `*ID:* ${dato.id}\n*Tarea:* ${dato.task}\n*Registrada:* ${dato.date}`,
      delay: 3000,
    }))
    await flowDynamic(taks)
    flowDynamic([{ body: `*${ctx.pushName}* esas son tus tareas pendientesâœ…\nPuedes completarlas utilizando el comando *completar* `, delay: 3000 }])
  },
)

const flowStartChat = addKeyword(['start', 'iniciar', 'inicio', 'comandos', '/']).addAnswer('ðŸ“ƒLa lista de comandos son:\n \nðŸ‘‰ *Listar* para ver las tareas pendientes\nðŸ‘‰ *Completar* para marcar como completa una tarea\nðŸ‘‰ *Registrar* para registrar *una tarea*', {
  media: 'https://i.imgur.com/xq9gKnAm.jpg'
})
const flowEndChatSay = addKeyword(['adios', 'gracias']).addAnswer('Nos vemos ðŸ¤˜', {
  media: 'https://i.imgur.com/og03n40m.jpg'
})


async function ingresarDatos(task) {
  let rows = [
    {
      status: 'pendiente',
      date: formatDate(new Date()),
      task: task.task,
      from: task.from,
    },
  ]
  try {
    await doc.loadInfo()
    let sheet = doc.sheetsByIndex[1]
    for (let index = 0; index < rows.length; index++) {
      const row = rows[index]
      await sheet.addRow(row)
    }
    return true
  } catch (error) {
    return false
  }
}

async function getTask(ctx) {
  let listTask = []
  try {
    await doc.loadInfo()
    const sheet = doc.sheetsByIndex[1]
    const rows = await sheet.getRows()
    for (let index = 0; index < rows.length; index++) {
      const row = rows[index]
      if (row._rawData[0] === ctx.from && row._rawData[2] === 'pendiente') {
        listTask.push({
          'task': row._rawData[1],
          'date': row._rawData[3],
          'id': row._rowNumber,
        })
      }
    }
    return listTask
  } catch (error) {
    return false
  }
}

async function updatedTask(task) {
  try {
    await doc.loadInfo()
    const sheet = doc.sheetsByIndex[1]
    const rows = await sheet.getRows()
    const rowsLength = rows.find(row => row._rowNumber === Number(task.id))
    if (rowsLength) {
      if (rowsLength._rawData[0] === task.from && rowsLength._rowNumber === Number(task.id) && rowsLength._rawData[2] === 'pendiente') {
        rowsLength._rawData[2] = 'completada'
        await rowsLength.save()
        return { status: true, message: 'Tarea completada' }
      }
      else {
        return { status: true, message: 'No se encontro la tarea \nIntenta listando tus tareas con *Listar*' }
      }

    } else {
      return { status: true, message: 'No se encontro la tarea \nIntenta listando tus tareas con *Listar*' }
    }
  } catch (error) {
    return false
  }
}



const main = async () => {
  const adapterDB = new JsonFileAdapter()
  const adapterFlow = createFlow([flowRegisterTask, flowListTask, flowEditTask, flowStartChat, flowEndChatSay])
  const adapterProvider = createProvider(BaileysProvider)

  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  })

  QRPortalWeb()
}

main()
